Created a folder and used cmd cd command to open cmd in this folder.
Used git clone < > to clone git repo. in this location.
in vs code, open new terminal and click right + and select git bash

-------------
next step is to create a conda environment : lets take name a venv ( means virtual environment ) 
check readme file

py -3 -m venv <name of environment>

now after creation, we also need t0 activate this virtual environment
<name of environment>\Scripts\activate



-----------
creation of requirements.txt file
to install mentioned packages of requirements.txt : use pip install -r requirements.txt

To Run any flask application
flask run   

-----------

now we have to save this changes into github:
now we dont need to send the venv file in github as thats hige, so to ignore this file to  be sent
in github : add this file into gitignore
(its already added into gitignore)

Follow these commands in cmd terminal to check git :

git status
this will tell whic files are to be tracked and untracked in git

git add <filename>
to add individual files : this will add mentioned file in git

git add .
to add all untracked files in git

BUT now after adding we also need to commit : commit is like saving the version

git log
to see all the previous version in git 


To COMMIT changes to git
git commit -m "message"
message is the text u will see in git log for this particular commit

git push -u origin branch_name_that_you_want_to_push
to send version/changes to github
After executing the above command, it will ask for a password. Provide your updated password.


git remote -v
to check the fetch and push url of our git project

----------------------
now next step is to connect github to heroku

To setup CI/CD pipeline in heroku we need 3 information : 
1. HEROKU_EMAIL : rktripathi710@gmail.com
2. HEROKU_API_KEY : 8069e479-7324-4ab0-9a12-c8687f974bc0
( for api key go to heroku my profile and in bottom there is the api key mentioned)
3. HEROKU_APP_NAME : mlprojj ( name of app on heroku)


--------------------

now next step is to create a DOCKER file
just create a new file named "Dockerfile"
also , 
create a .dockerignore file to set files which docker is going to ignore


BUILD DOCKER IMAGE
```
docker build -t <image_name>:<tagname> .
```
note : name of image must be in lowercase

DOCKER IS NOT REQUIRED AT THIS TIME
FURTHER DOCKER CODE IS PRESENT IN  12 JUNE CLASS

-----------------------

for final deployment : create a folder .github
in this create a folder <workflows>
in this folder create a file <main.yaml>

code is mentioned there, further go to github project settings and there in secrets, there we need to manage
our heroku secrets so that app could be deployed
(new repository secret )

In github at too menu u can see actions : there we can see if there are any issues in ci/CD
after fixing that we can re run jobs from there only and see things getting deployed to heroku

now on heroku if we click run app, app is up and running
======================
Note : we have used gunicord library to run flask application but that dsent support windoes
but when we upload code to github, code there runs on ubuntu vm, and hence this library is supported
======================================================

create a setyp.py file
: we use pip install cocmmand everytime to install requirements right, this could be 
done by setup file easily
just like games executing


Also create a main project file <housing> and create a __init__.py file in this
this init file states that this folder is a python module / package


Creating a function which will read all lib mentioned in requirements.txt fileso that user do not 
need to run pip command and can be done through this setup file only

we can install setup using > python setup.py install

===================
another step whcih could be done is :
in setup.py : 
from setuptools import  setup, find_packages
and
paskages = find_packages()
in setup() # in setup.py file


basically : it goes to each folder and if any folde rcontains __init__.py in it, it will update that filder as packages in the setup()

======================

=============
When we use setup.pdf file for installing all of the required libraries and packages then there is
 basically no issues. 
 But when we are using PIP Command Pipe command to actually install of the requirements from the
  requirements.txt file what happens is that.It actually installs all of the things mentioned 
  inside the requirements.TXT file but misses the housing package like the main package in which 
  __init__ file is there. So for that we put one more command in our requirement. txt file 
  which will also install of the Modules 
  
required file : -e .
this -e .
is to be kept in requirements.txt file  for the above mentuoned purpose


but we will be removing this from our custom functoin later on as we are further using find_packages()
which is equivlent to -e .
( if we are using )

Note : -e . will  not work without setup.py file
======================

Inside housing folder : 
    There will be exception package for exception handling
    There will be Logger package for logging
    there will be pipeline packagethere will be stages package
    there will be component package
    there will be config package
    there will be entity package

---------

Eg : explanation of __str__ and __repr__ in Exception __init__.py
class Demo:
    def _str_(self):
        return"We are understanding str function"
    def repr_(self):
        return"This is repr function"
Demo()
o/p : This is repr function
print(Demo())
o/p : We are understanding str function

------------

 nametuple() : if we give name to each element in a tuple, that tuple can be called as nbametuple
 and hence as it is a tuple, we cant edit anyhthing later
------------

creation of a config folder in main list
note : another ocnfig was in Housing folder structure, it is not the same

this config folder will contain a config.yaml file
---------

in housing, create a folder util

in this create a util.py file
 